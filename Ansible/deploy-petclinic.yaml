---
- name: Deploy Spring PetClinic to VM
  hosts: all
  become: true

  vars:
    ecr_image_url: "{{ ecr_url }}/{{ image_name }}"
    postgres_port: 5432
    postgres_user: "{{ postgres_user }}"
    postgres_password: "{{ postgres_password }}"
    postgres_db: "{{ postgres_db }}"

  tasks:
    - name: Install required packages for Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - unzip
          - software-properties-common
        state: present
        update_cache: true

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        filename: docker

    - name: Install Docker CE
      apt:
        name: docker-ce
        state: present
        update_cache: true

    - name: Ensure Docker service is started and enabled
      service:
        name: docker
        state: started
        enabled: true

    # ðŸ”§ INSTALAR AWS CLI v2
    - name: Download AWS CLI v2 installer
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Unzip AWS CLI installer
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes

    - name: Install AWS CLI v2
      shell: /tmp/aws/install
      args:
        creates: /usr/local/bin/aws

    # âœ… LOGIN a Amazon ECR
    - name: Log in to Amazon ECR
      shell: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin {{ ecr_url }}
      environment:
        AWS_REGION: us-east-1


    - name: Stop and remove existing container
      shell: |
        docker stop {{ image_name }} || true
        docker rm {{ image_name }} || true
      ignore_errors: true

    - name: Remove old container (if exists)
      community.docker.docker_container:
        name: "{{ image_name }}"
        state: absent

    - name: Pull new Docker image from ECR
      community.docker.docker_image:
        name: "{{ ecr_image_url }}"
        tag: "{{ image_tag }}"
        source: pull

    - name: Run new container
      community.docker.docker_container:
        name: "{{ image_name }}"
        image: "{{ ecr_url }}:{{ image_tag }}"
        state: started
        restart_policy: always
        published_ports:
          - "80:8080"
        env:
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          POSTGRES_DB: "{{ postgres_db }}"

    - name: Wait for app to start
      wait_for:
        port: 80
        delay: 5
        timeout: 60
        state: started

    - name: Verify DB connection from the instance
      command: >
        nc -z {{ postgres_host }} {{ postgres_port }}
      register: db_check
      failed_when: db_check.rc != 0
      changed_when: false

    - name: Report success
      debug:
        msg: "Java app deployed successfully and connected to the database!"
